---
import BlogLayout from "@/components/layouts/BlogLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const backArrow = "../../../images/arrow.svg";

// Use the defined schema in content/config.ts to ensure type safety
const posts: CollectionEntry<"blog">[] = await getCollection("blog");

// Get unique tags from all posts
const allTags = Array.from(new Set(posts.flatMap((post) => post.data.tags)));

// Utility function to format the date to MM-DD-YYYY without leading zero
const formatDate = (date: Date) => {
  const month = date.getMonth() + 1; // Months are 0-indexed
  const day = date.getDate();
  const year = date.getFullYear();
  return `${month}•${day}•${year}`;
};
---

<BlogLayout id="blog" class="relative w-screen h-screen overflow-hidden">
  <div class="bg w-[100vw] pb-10 flex justify-center">
    <div class="overlay"></div>
    <div class="flex-col justify-center w-[100vw] max-w-[1200px]">
      <div class="pt-4 pl-4 flex justify-between items-start">
        <button
          class="flex items-center bg-[#7F0201] hover:bg-[#A52A2A] text-white font-bold py-1.5 px-3 rounded-xl no-underline"
          data-astro-prefetch
          onclick="window.location.href = '/'"
        >
          <img
            src={backArrow}
            alt="Back Arrow"
            class="w-4 my-0"
            style="filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(360deg) brightness(100%) contrast(100%);"
          />
          &nbsp; Store Page
        </button>
      </div>

      <div
        class="flex flex-col justify-center text-center w-3/4 md:w-2/3 pt-2 mx-auto"
      >
        <p>
          Lorem ipsum odor amet, consectetuer adipiscing elit. Iaculis ex nisl
          himenaeos euismod nostra habitant. Class mattis tortor purus odio
          nullam bibendum posuere tortor semper. Magna eros ipsum nam accumsan
          neque tristique.
        </p>
        <div class="flex-col pr-4 -mr-4">
          <div class="flex justify-start items-start space-x-1">
            <h3
              class="flex justify-start text-sm tracking-widest my-0 -mb-1 ml-10"
            >
              Filter by:
            </h3>
          </div>
          <div class="flex space-x-1 p-2 overflow-x-auto pb-1 scrollbar-hide">
            {/* Horizontal scroll container for tags */}
            {
              allTags.map((tag) => (
                <button
                  class="tag-button bg-[#7F0201] hover:bg-[#A52A2A] text-white text-md tracking-narrow px-3 rounded-xl whitespace-nowrap"
                  data-tag={tag}
                >
                  {tag}
                </button>
              ))
            }
          </div>
        </div>
      </div>

      <div id="post-container" class="flex justify-center max-w-[1200px]">
        <div
          class="grid min-[690px]:grid-cols-2 lg:grid-cols-3 gap-4 place-items-center sm:w-[690px] lg:w-[1020px] px-4 pt-6 pb-16 drop-shadow-2xl"
        >
          {/* Post cards will be dynamically filtered */}
          {
            posts.map((post) => (
              <div
                class="post-card relative flex flex-col w-[320px] min-[450px]:w-[400px] min-[690px]:w-[320px] lg:w-[320px] rounded-3xl border bg-[#F9DCB1]"
                data-tags={post.data.tags.join(",")}
              >
                <img
                  src="https://placehold.co/400x270"
                  alt="Hashtag photo"
                  class="rounded-t-3xl my-0"
                />
                <div class="py-2 px-4 rounded-xl">
                  <a
                    href={`/blog/${post.slug}/`}
                    class="font-bold no-underline text-lg tracking-tighter"
                  >
                    {post.data.title}
                  </a>
                  <time class="absolute bottom-0 right-3 text-sm tracking-wider font-bold mb-2">
                    {formatDate(new Date(post.data.publishDate))}
                  </time>
                  <div class="flex space-x-1">
                    {post.data.tags.map((tag) => (
                      <button class="bg-[#7F0201] hover:bg-[#A52A2A] text-white text-sm tracking-narrow px-2 rounded-xl">
                        {tag}
                      </button>
                    ))}
                  </div>
                </div>
                <p class="min-h-[70px] mt-2 mx-2 leading-5">
                  {post.data.description}
                </p>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</BlogLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tagButtons =
      document.querySelectorAll<HTMLButtonElement>(".tag-button");
    const postCards = document.querySelectorAll<HTMLElement>(".post-card");
    let selectedTag: string | null = null;

    // Function to apply animation classes
    const applyAnimation = (postCard: HTMLElement, isVisible: boolean) => {
      if (isVisible) {
        postCard.classList.remove("hidden");
        // Add a timeout to trigger CSS transitions
        requestAnimationFrame(() => {
          postCard.classList.add("animate");
        });
      } else {
        postCard.classList.add("hidden");
        // Remove the animate class after the animation completes
        postCard.addEventListener(
          "transitionend",
          () => {
            postCard.classList.remove("animate");
          },
          { once: true }
        );
      }
    };

    // Add click event listener for each tag button
    tagButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const target = event.target as HTMLButtonElement;
        const clickedTag = target.getAttribute("data-tag");

        // Check if the clicked tag is already selected
        if (selectedTag === clickedTag) {
          // Deselect the tag
          target.classList.remove("active-tag");
          selectedTag = null; // Reset selectedTag

          // Show all post cards
          postCards.forEach((postCard) => {
            applyAnimation(postCard, true);
          });
        } else {
          // Remove active class from all tag buttons
          tagButtons.forEach((btn) => btn.classList.remove("active-tag"));

          // Add active class to the clicked button
          target.classList.add("active-tag");

          // Set the selected tag to the clicked tag
          selectedTag = clickedTag;

          // Filter post cards based on the selected tag
          postCards.forEach((postCard) => {
            const postTags = postCard.getAttribute("data-tags")?.split(",");

            // Show or hide the post card based on the selected tag
            if (postTags?.includes(selectedTag ?? "")) {
              applyAnimation(postCard, true);
            } else {
              applyAnimation(postCard, false);
            }
          });
        }
      });
    });
  });
</script>

<style>
  body {
    scroll-behavior: smooth;
  }

  .scrollbar-hide::-webkit-scrollbar {
    height: 8px;
  }

  .scrollbar-hide::-webkit-scrollbar-thumb {
    background-color: #7f0201;
    border-radius: 10px;
  }

  .bg {
    background-image: url(/src/assets/blog-background.png);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: bottom;
  }

  .active-tag {
    background-color: #a52a2a; /* Highlight color for the active tag */
  }

  .tag-button {
    transition:
      background-color 0.3s ease,
      transform 0.3s ease;
  }

  .tag-button:hover {
    transform: scale(1.1); /* Add hover effect for non-active buttons */
  }
</style>
